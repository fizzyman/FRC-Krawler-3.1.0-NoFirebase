package com.team2052.frckrawler.db;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "MATCH_COMMENT".
 */
public class MatchComment implements java.io.Serializable {

    private Long id;
    private Long match_number;
    private Integer match_type;
    private Long robot_id;
    private Long event_id;
    private String comment;
    private java.util.Date last_updated;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient MatchCommentDao myDao;

    private Robot robot;
    private Long robot__resolvedKey;

    private Event event;
    private Long event__resolvedKey;


    public MatchComment() {
    }

    public MatchComment(Long id) {
        this.id = id;
    }

    public MatchComment(Long id, Long match_number, Integer match_type, Long robot_id, Long event_id, String comment, java.util.Date last_updated) {
        this.id = id;
        this.match_number = match_number;
        this.match_type = match_type;
        this.robot_id = robot_id;
        this.event_id = event_id;
        this.comment = comment;
        this.last_updated = last_updated;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMatchCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getMatch_number() {
        return match_number;
    }

    public void setMatch_number(Long match_number) {
        this.match_number = match_number;
    }

    public Integer getMatch_type() {
        return match_type;
    }

    public void setMatch_type(Integer match_type) {
        this.match_type = match_type;
    }

    public Long getRobot_id() {
        return robot_id;
    }

    public void setRobot_id(Long robot_id) {
        this.robot_id = robot_id;
    }

    public Long getEvent_id() {
        return event_id;
    }

    public void setEvent_id(Long event_id) {
        this.event_id = event_id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public java.util.Date getLast_updated() {
        return last_updated;
    }

    public void setLast_updated(java.util.Date last_updated) {
        this.last_updated = last_updated;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Robot getRobot() {
        Long __key = this.robot_id;
        if (robot__resolvedKey == null || !robot__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RobotDao targetDao = daoSession.getRobotDao();
            Robot robotNew = targetDao.load(__key);
            synchronized (this) {
                robot = robotNew;
                robot__resolvedKey = __key;
            }
        }
        return robot;
    }

    public void setRobot(Robot robot) {
        synchronized (this) {
            this.robot = robot;
            robot_id = robot == null ? null : robot.getId();
            robot__resolvedKey = robot_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Event getEvent() {
        Long __key = this.event_id;
        if (event__resolvedKey == null || !event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            Event eventNew = targetDao.load(__key);
            synchronized (this) {
                event = eventNew;
                event__resolvedKey = __key;
            }
        }
        return event;
    }

    public void setEvent(Event event) {
        synchronized (this) {
            this.event = event;
            event_id = event == null ? null : event.getId();
            event__resolvedKey = event_id;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
